# fashion_trend_analysis.py

import openai
import os
import base64
from PIL import Image
from tqdm import tqdm
import pandas as pd
from dotenv import load_dotenv

# Load environment variables from a .env file
load_dotenv()

# Configure OpenAI settings for Azure deployment
openai.api_type = "azure"  # Specifies that we're using Azure's OpenAI service
openai.api_key = os.getenv("AZURE_OPENAI_API_KEY")  # Load API key from .env
openai.api_base = os.getenv("AZURE_OPENAI_ENDPOINT")  # Load Azure OpenAI endpoint
openai.api_version = "2024-03-01-preview"  # API version for GPT-4 Vision on Azure

# Name of your Azure OpenAI GPT-4 Turbo Vision deployment
deployment_name = "gpt-4o"  # Update this to match your deployed model name

# Path to local folder where fashion images are stored
image_folder = "image"  # Folder from downloaded Kaggle dataset


# Define a function to analyze one image using GPT-4 Vision
def analyze_image(filepath):
    # Read the image in binary mode
    with open(filepath, "rb") as f:
        image_bytes = f.read()

    # Encode the image as a base64 string (required for image_url input format)
    b64_image = base64.b64encode(image_bytes).decode("utf-8")

    # Prepare the message for the GPT-4 Vision model
    messages = [
        {"role": "system", "content": "You are a fashion trend analyst."},
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Describe the clothing items, colors, and fashion style in this image.",
                },
                {
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{b64_image}"  # Inline base64 image data
                    },
                },
            ],
        },
    ]

    # Call Azure OpenAI's GPT-4 Turbo Vision API with the image and prompt
    response = openai.ChatCompletion.create(
        deployment_id=deployment_name,  # Use your deployment
        messages=messages,  # Include prompt and image
        max_tokens=4000,  # Control the verbosity of the response
    )

    # Return the textual trend summary generated by the model
    return response["choices"][0]["message"]["content"]


# List to store filename and GPT-generated summaries
results = []

# Process the first 10 images in the dataset folder
# tqdm adds a progress bar to the loop
for file in tqdm(os.listdir(image_folder)[:10]):
    path = os.path.join(image_folder, file)  # Get full file path
    summary = analyze_image(path)  # Analyze each image
    results.append({"filename": file, "summary": summary})  # Save results

# Create a DataFrame from the results for further analysis or reporting
df = pd.DataFrame(results)

# Save the results to a CSV file
df.to_csv("fashion_trends_output.csv", index=False)

# Notify user of completion
print("Fashion trend analysis completed and saved to fashion_trends_output.csv")
